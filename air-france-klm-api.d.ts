/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/flights': {
		/** get flights */
		get: operations['getFlights'];
	};
	'/flights/{flightDate}': {
		/** get flight status details */
		get: operations['getFlightStatus'];
	};
	'/flights/{flightId}': {
		/**
		 * get flight status
		 * @deprecated
		 */
		get: operations['getFlightStatus_1'];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		FlightsResponse: {
			errors?: components['schemas']['ErrorResponse'][];
			operationalFlights?: components['schemas']['OperationalFlight'][];
			page?: components['schemas']['PageResponse'];
		};
		ArrivalAirport: {
			city?: components['schemas']['City'];
			code?: string;
			location?: components['schemas']['Location'];
			name?: string;
			nameLangTranl?: string;
			places?: components['schemas']['ArrivalPlaces'];
		};
		Airline: {
			code?: string;
			name?: string;
		};
		Irregularity: {
			cancelled?: string;
			delayCode?: string[];
			delayDuration?: string[];
			delayDurationArrival?: string;
			delayDurationInternal?: string;
			delayDurationPublic?: string;
			delayInformation?: components['schemas']['DelayInformation'][];
			/** Format: date-time */
			delayNextInfoDateTime?: string;
			delayReason?: string[];
			delayReasonCodePublic?: string[];
			delayReasonPublic?: string[];
			delayReasonPublicLangTransl?: string[];
			delaySubCode?: string[];
			divertedFrom?: string;
			divertedTo?: string;
			publicDisruptionReason?: string;
			scheduledActionCode?: string;
			scheduledChangeReason?: string;
			cancellationReasonCodePublic?: string;
			cancellationReasonPublicLong?: string;
			cancellationReasonPublicShort?: string;
		};
		FlightLeg: {
			aircraft?: components['schemas']['Aircraft'];
			/** @description The format is ISO8601 time interval */
			arrivalDateTimeDifference?: string;
			arrivalInformation?: components['schemas']['ArrivalInformation'];
			completionPercentage?: string;
			/** @description The format is ISO8601 time interval */
			departureDateTimeDifference?: string;
			departureInformation?: components['schemas']['DepartureInformation'];
			internalLegStatus?: string;
			internalLegStatusArrFocus?: boolean;
			irregularity?: components['schemas']['Irregularity'];
			legStatusInternal?: string;
			legStatusInternalLangTransl?: string;
			legStatusPublic?: string;
			legStatusPublicLangTransl?: string;
			passengerCustomsStatus?: string;
			publishedStatus?: string;
			/** @description The format is ISO8601 time interval */
			scheduledFlightDuration?: string;
			serviceType?: string;
			serviceTypeName?: string;
			status?: string;
			statusName?: string;
			/** @description The format is ISO8601 time interval */
			timeToArrival?: string;
			timeZoneDifference?: string;
			trajectories?: components['schemas']['Trajectory'][];
			otherFlightLegStatuses: components['schemas']['OtherFlightLegStatuses'];
		};
		OtherFlightLegStatuses: {
			acceptanceStatus?: string;
			boardingStatus?: string;
		};
		OperationalFlight: {
			airline?: components['schemas']['Airline'];
			baseProvinceIndicator?: string;
			codeShareRelations?: components['schemas']['CodeShareRelation'][];
			errors?: components['schemas']['ErrorResponse'][];
			flightDetailsBlocked?: boolean;
			flightLegs?: components['schemas']['FlightLeg'][];
			/** Format: int32 */
			flightNumber?: number;
			flightRelations?: components['schemas']['FlightRelations'];
			/** Format: date */
			flightScheduleDate?: string;
			flightStatusInternal?: string;
			flightStatusInternalLangTransl?: string;
			flightStatusPublic?: string;
			flightStatusPublicLangTransl?: string;
			haul?: string;
			id?: string;
			internalFlightStatus?: string;
			internalStatusArrFocus?: boolean;
			operationalSuffix?: string;
			route?: string[];
		};
		DeparturePlaces: {
			aerogareCode?: string;
			boardingBusQuantity?: string;
			boardingContactType?: string;
			boardingPier?: string;
			boardingTerminal?: string;
			checkInAerogare?: string;
			checkInZone?: string[];
			departureTerminal?: string;
			gateNumber?: string[];
			parkingPosition?: string;
			parkingPositionCustomStatus?: string;
			parkingPositionType?: string;
			pierCode?: string;
			profileLocation?: string;
			terminalCode?: string;
		};
		CodeShareRelation: {
			airline?: components['schemas']['Airline'];
			code?: string;
			/** Format: date */
			flightScheduleDate?: string;
			/** Format: int32 */
			marketingFlightNumber?: number;
			operationalSuffix?: string;
			saleableVersion?: string;
			type?: string;
		};
		PageResponse: {
			/** Format: int32 */
			fullCount?: number;
			/** Format: int32 */
			pageCount?: number;
			/** Format: int32 */
			pageNumber?: number;
			/** Format: int32 */
			pageSize?: number;
			/** Format: int32 */
			totalPages?: number;
		};
		Estimated: {
			origin?: string;
			type?: string;
			/** Format: date-time */
			value?: string;
		};
		Trajectory: {
			/** Format: date-time */
			aircraftPositionTime?: string;
			location?: components['schemas']['Location'];
		};
		DepartureAirport: {
			city?: components['schemas']['City'];
			code?: string;
			location?: components['schemas']['Location'];
			name?: string;
			nameLangTranl?: string;
			places?: components['schemas']['DeparturePlaces'];
		};
		ArrivalInformation: {
			airport?: components['schemas']['ArrivalAirport'];
			landingRunwayCode?: string;
			priorityIndicator?: string;
			times?: components['schemas']['LegTimes'];
		};
		DepartureInformation: {
			airport?: components['schemas']['DepartureAirport'];
			priorityIndicator?: string;
			takeOffRunwayCode?: string;
			times?: components['schemas']['LegTimes'];
		};
		HyperMediaLink: {
			hostPrefix?: string;
			href?: string;
			profile?: string;
			templated?: boolean;
			type?: string;
		};
		City: {
			code?: string;
			country?: components['schemas']['Country'];
			name?: string;
			nameLangTranl?: string;
		};
		ErrorResponse: {
			action?: components['schemas']['HyperMediaLink'];
			code?: string;
			description?: string;
			name?: string;
			/** @enum {string} */
			severity?: 'ERROR' | 'WARNING' | 'INFO';
		};
		FlightRelations: {
			equivalentFlightData?: components['schemas']['FlightData'];
			onwardFlightData?: components['schemas']['FlightData'];
			previousFlightData?: components['schemas']['FlightData'];
		};
		DelayInformation: {
			delayCode?: string;
			delayDuration?: string;
			delayReason?: string;
			delayReasonCodePublic?: string;
			delayReasonPublicLong?: string;
			delayReasonPublicShort?: string;
			delaySubCode?: string;
		};
		FlightData: {
			airlineCode?: string;
			flightNumber?: string;
			/** Format: date */
			flightScheduleDate?: string;
			id?: string;
			operationalSuffix?: string;
		};
		Country: {
			areaCode?: string;
			code?: string;
			euCountry?: string;
			euroCountry?: string;
			name?: string;
			nameLangTranl?: string;
		};
		LegTimes: {
			/** Format: date-time */
			actual?: string;
			/** Format: date-time */
			actualTakeOffTime?: string;
			/** Format: date-time */
			actualTouchDownTime?: string;
			/** Format: date-time */
			aircraftOnPosition?: string;
			/** Format: date-time */
			departureSlotTime?: string;
			/** Format: date-time */
			endOfHandling?: string;
			estimated?: components['schemas']['Estimated'];
			/** Format: date-time */
			estimatedArrival?: string;
			/** Format: date-time */
			estimatedInternal?: string;
			/** Format: date-time */
			estimatedPublic?: string;
			/** Format: date-time */
			estimatedTakeOffTime?: string;
			/** Format: date-time */
			estimatedTouchDownTime?: string;
			/** Format: date-time */
			latestPublished?: string;
			/** Format: date-time */
			modified?: string;
			/** Format: date-time */
			scheduled?: string;
			/** Format: date-time */
			targetOffBlock?: string;
			/** Format: date-time */
			targetStartupApprovalTime?: string;
		};
		Aircraft: {
			cabinCrewEmployer?: string;
			cockpitCrewEmployer?: string;
			operationalConfiguration?: string;
			ownerAirlineCode?: string;
			ownerAirlineName?: string;
			physicalFreightConfiguration?: string;
			physicalPaxConfiguration?: string;
			registration?: string;
			saleableConfiguration?: string;
			subFleetCodeId?: string;
			typeCode?: string;
			typeName?: string;
			wifiEnabled?: string;
		};
		ArrivalPlaces: {
			aerogareCode?: string;
			arrivalHall?: string[];
			arrivalPositionPier?: string;
			arrivalPositionTerminal?: string;
			arrivalTerminal?: string;
			baggageBelt?: string[];
			disembarkingAerogare?: string;
			disembarkingBusQuantity?: string;
			disembarkingContactType?: string;
			/** Format: date-time */
			firstBagOnBeltTime?: string;
			flightSecurityLevel?: string;
			gateNumber?: string[];
			/** Format: date-time */
			lastBagOnBeltTime?: string;
			parkingPosition?: string;
			parkingPositionCustomStatus?: string;
			parkingPositionType?: string;
			pierCode?: string;
			terminalCode?: string;
		};
		Location: {
			/** Format: int32 */
			altitude?: number;
			latitude?: number;
			longitude?: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	/** get flights */
	getFlights: {
		parameters: {
			query?: {
				/** @description date time of start range */
				startRange?: string;
				/** @description date time of end range */
				endRange?: string;
				/** @description indicates that range applies to origin or destination */
				movementType?: 'A' | 'D';
				/** @description indicates on which date time to query on */
				timeOriginType?: 'S' | 'M' | 'I' | 'P';
				/** @description indicates that given range is UTC or LOCAL */
				timeType?: 'U' | 'L';
				/** @description IATA airport code of departure */
				origin?: string;
				/** @description IATA city code of departure */
				departureCity?: string;
				/** @description IATA airport code of arrival */
				destination?: string;
				/** @description IATA city code of arrival */
				arrivalCity?: string;
				/** @description consumer Host */
				consumerHost?: string;
				/** @description IATA airline code */
				carrierCode?: string[];
				/** @description IATA operating airline codes */
				operatingAirlineCode?: string[];
				/** @description flight number which is four digits long, when smaller prefix with zero */
				flightNumber?: string;
				/** @description operational suffix, indicates if a flight has been advanced or delayed to the previous or next day */
				operationalSuffix?: 'A' | 'D';
				/** @description filter on aircraft registration */
				aircraftRegistration?: string;
				/** @description filter on aircraft type */
				aircraftType?: string;
				/** @description indicates the number of elements the page will contain */
				pageSize?: number;
				/** @description indicates the page number you are requesting, the first page is page 0. If it's not provided first page will be returned */
				pageNumber?: number;
				/** @description serviceType search */
				serviceType?: string[];
			};
			header: {
				/** @description indicates the language you are requesting. If it's not provided default language 'en-GB' will be consider */
				'Accept-Language'?: string;
				/** @description Accept */
				Accept: 'V1' | 'V2' | 'V3' | 'INVALID';
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					'application/hal+json': components['schemas']['FlightsResponse'];
				};
			};
			/** @description Unauthorized */
			401: {
				content: never;
			};
			/** @description Forbidden */
			403: {
				content: never;
			};
			/** @description Not Found */
			404: {
				content: never;
			};
		};
	};
	/** get flight status details */
	getFlightStatus: {
		parameters: {
			query?: {
				/** @description consumer Host */
				consumerHost?: string;
				/** @description expand with additional flight information */
				expand?: 'trajectory';
			};
			header: {
				/** @description indicates the language you are requesting. If it's not provided defatult language 'en-GB' will be consider */
				'Accept-Language'?: string;
				/** @description Accept */
				Accept: 'V1' | 'V2' | 'V3' | 'INVALID';
			};
			path: {
				/** @description id of the flight */
				flightDate: string;
				/** @description flightCarrier */
				flightCarrier: string;
				/** @description flightNumber */
				flightNumber: string;
				/** @description flightSuffix */
				flightSuffix: string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					'application/hal+json': components['schemas']['OperationalFlight'];
				};
			};
			/** @description Unauthorized */
			401: {
				content: never;
			};
			/** @description Forbidden */
			403: {
				content: never;
			};
			/** @description Not Found */
			404: {
				content: never;
			};
		};
	};
	/**
	 * get flight status
	 * @deprecated
	 */
	getFlightStatus_1: {
		parameters: {
			query?: {
				/** @description IATA airport code of departure */
				origin?: string;
				/** @description expand with additional flight information */
				expand?: 'trajectory';
			};
			header: {
				/** @description indicates the language you are requesting. If it's not provided default language 'en-GB' will be consider */
				'Accept-Language'?: string;
				/** @description indicates the consumer you are requesting. If it's not provided default language 'KL' will be consider */
				'AFKL-TRAVEL-Host'?: string;
				/** @description Accept */
				Accept: 'V1' | 'V2' | 'V3' | 'INVALID';
			};
			path: {
				/** @description id of the flight */
				flightId: string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					'application/hal+json': components['schemas']['OperationalFlight'];
				};
			};
			/** @description Unauthorized */
			401: {
				content: never;
			};
			/** @description Forbidden */
			403: {
				content: never;
			};
			/** @description Not Found */
			404: {
				content: never;
			};
		};
	};
}
